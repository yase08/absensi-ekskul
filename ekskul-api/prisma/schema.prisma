generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int            @id @default(autoincrement())
  email                String         @unique
  name                 String         @unique
  nis                  String?
  mobileNumber         String?
  password             String
  image                String?
  role                 Role           @relation(fields: [roleId], references: [id])
  ekskuls              UserOnEkskul[]
  roleId               Int            @unique
  announcements        Announcement[]
  passwordChangedAt    DateTime?      @db.Timestamptz(3)
  passwordResetToken   String?
  passwordResetExpires DateTime?      @db.Timestamptz(3)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  Instructor           InstructorAttendance[]
}

model Student {
  id           Int              @id @default(autoincrement())
  name         String
  nis          String
  email        String
  mobileNumber String
  rombel       Rombel           @relation(fields: [rombelId], references: [id])
  rayon        Rayon            @relation(fields: [rayonId], references: [id])
  ekskuls      StudentOnEskul[]
  rombelId     Int              @unique
  rayonId      Int              @unique
  Attendance   Attendance[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model StudentOnEskul {
  student   Student @relation(fields: [studentId], references: [id])
  studentId Int
  ekskul    Ekskul  @relation(fields: [ekskulId], references: [id])
  ekskulId  Int

  @@id([studentId, ekskulId])
}

model UserOnEkskul {
  user     User   @relation(fields: [userId], references: [id])
  userId   Int
  ekskul   Ekskul @relation(fields: [ekskulId], references: [id])
  ekskulId Int

  @@id([userId, ekskulId])
}

model Gallery {
  id        Int      @id @default(autoincrement())
  url       String
  ekskul    Ekskul   @relation(fields: [ekskulId], references: [id])
  ekskulId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Assessment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ActivityProgram {
  id        Int      @id @default(autoincrement())
  activity  String
  task      String
  startDate String
  endDate   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Schedule {
  id        Int                @id @default(autoincrement())
  day       String
  class     String
  room      String
  ekskuls   ScheduleOnEkskul[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model ScheduleOnEkskul {
  ekskul     Ekskul   @relation(fields: [ekskulId], references: [id])
  ekskulId   Int
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId Int

  @@id([ekskulId, scheduleId])
}

model Rayon {
  id        Int      @id @default(autoincrement())
  name      String
  Student   Student?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rombel {
  id        Int      @id @default(autoincrement())
  name      String
  Student   Student?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ekskul {
  id         Int                @id @default(autoincrement())
  name       String
  category   EkskulCategory     @relation(fields: [categoryId], references: [id])
  categoryId Int                @unique
  User       UserOnEkskul[]
  Gallery    Gallery[]
  Schedules  ScheduleOnEkskul[]
  Student    StudentOnEskul[]
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
}

model EkskulCategory {
  id        Int      @id @default(autoincrement())
  name      String
  Ekskul    Ekskul?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Permission {
  id        Int                @id @default(autoincrement())
  name      String
  roles     RoleOnPermission[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model Role {
  id          Int                @id @default(autoincrement())
  name        String
  permissions RoleOnPermission[]
  User        User?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model RoleOnPermission {
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int

  @@id([roleId, permissionId])
}

model Attendance {
  id        Int                @id @default(autoincrement())
  category  CategoryAttendance
  siswa     Student            @relation(fields: [siswaId], references: [id])
  siswaId   Int
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model InstructorAttendance {
  id           Int                @id @default(autoincrement())
  category     CategoryAttendance
  instructor   User               @relation(fields: [instructorId], references: [id])
  instructorId Int
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

enum CategoryAttendance {
  HADIR
  SAKIT
  IZIN
  ALPA
}
